// $Id: vxRendererSoftware.h,v 1.4 2007/02/15 00:08:24 jmeade Exp $
//
// Copyright © 2002, Viatronix Inc., All Rights Reserved.
//
// This is PROPRIETARY SOURCE CODE of Viatronix Inc. The contents of this file
// may not be disclosed to third parties, copied or duplicated in any form, 
// in whole or in part, without the prior written permission of Viatronix Inc. 
//
// Author: Michael Meissner (michael@viatronix.com)

/**
 * This class defines the render software
 */

#ifndef vxRendererSoftware_h
#define vxRendererSoftware_h


// includes
#include "vxRenderer.h"
#include "GLEnv.h"
#include "vxRenderThread.h"
#include "Image.h"
#include "vxTexMap2dTile.h"


// forward declarations
template <class T> class PixelRGBA;


// class definition
class VX_VIEWER_DLL vxRendererSoftware : public vxRenderer
{
// functions
public:

  /// constructor
  vxRendererSoftware(vxEnvironment & environment);
 
  /// destructor
  virtual ~vxRendererSoftware();

  /// initialize
  virtual void Initialize();
  
  /// uninitialize
  virtual void Uninitialize();
  
  /// perform pre-rendering operations
  virtual int4 PreRender();

  /// returns the texture Id
  inline bool GetMultiThreadRendering() { return m_bRenderMultiThreaded; };

  /// returns the texture Id
  inline int4 GetNumberOfThreads() { return m_uNumberOfThreads; };

  /// returns the pointer to all threads
  inline vxRenderThread * GetRenderThreadsPtr() { return m_pRenderThreads; };

  /// returns the progress to all threads
  inline float4 * GetRenderThreadsProgressPtr() { return m_pRenderThreadsProgress; };

  /// returns the texture Id
  virtual GLuint GetTextureId() { return m_textureTile.GetDensityTextureId(); };

  /// returns the image
  Image<PixelRGBA<uint1> > & GetImage();

protected:

  /// sets multi-threaded rendering true/false
  inline void SetMultiThreadRendering(bool bFlag) { m_bRenderMultiThreaded = bFlag; };

  /// sets the number of threads
  inline void SetNumberOfThreads(uint1 uNumber) { m_uNumberOfThreads = uNumber; };

  /// sets the pointer to rendering threads
  inline void SetRenderThreadsPtr(vxRenderThread * pRenderThreads) { m_pRenderThreads = pRenderThreads; };

  /// sets the pointer to rendering threads progress
  inline void SetRenderThreadsProgressPtr(float4 * pRenderThreadsProgress) { m_pRenderThreadsProgress = pRenderThreadsProgress; };

  /// sets the texture Id
  inline void SetTextureId(GLuint iId) { GetTextureTile().SetDensityTextureId(iId); };

  /// sets flag whether rendering is necesary
  inline void SetRenderingNecessary(bool bFlag) { m_bRenderingNecessary = bFlag; };

  /// returns state for rendering
  inline bool GetRenderingNecessary() { return m_bRenderingNecessary; };

  /// create a texture
  virtual inline void CreateTexture();

  /// Set the texture of the image generated by the algorithm
  virtual void DrawTexture() {};

  /// returns the texture Id
  inline vxTexMap2dTile & GetTextureTile() { return m_textureTile; };

  /// get pointer to lookup tables
  inline float4 * GetTablePointerRGBA() { return m_pRGBA; }

  /// get pointer to lookup tables
  inline void SetTablePointerRGBA(float4 * pRGBA) { m_pRGBA = pRGBA; }

  /// get number of bits to shift alpha to a 8 bit value
  inline int4 GetNumberOfShiftBitsFor8bitAlpha() { return m_iShift8Bit; }

  /// set number of bits to shift alpha to a 8 bit value
  inline void SetNumberOfShiftBitsFor8bitAlpha(int4 iShift) { m_iShift8Bit = iShift; }

private:

  /// copy constructor
  vxRendererSoftware(const vxRendererSoftware & other);                   // should only be public if really implemented!

  /// assignment operator
  const vxRendererSoftware & operator=(const vxRendererSoftware & other); // should only be public if really implemented!

// data
private:

  /// texture tile containing teximage and texture coordinates
  vxTexMap2dTile m_textureTile;

  /// is rendering necessary
  bool m_bRenderingNecessary;

  /// is multi-threaded rendering enabled
  bool m_bRenderMultiThreaded;

  /// number of threads to use in parallel
  int4 m_uNumberOfThreads;

  /// array of rendering threads
  vxRenderThread * m_pRenderThreads;

  /// array of rendering threads progress [0,1]
  float4 * m_pRenderThreadsProgress;

  /// data pointer for lookup table
  float4 * m_pRGBA;

  /// number of bits to shift alpha to an 8 bit value
  int4 m_iShift8Bit;
}; // vxRendererSoftware


#endif // vxRendererSoftware_h


// Revision History:
// $Log: vxRendererSoftware.h,v $
// Revision 1.4  2007/02/15 00:08:24  jmeade
// Merge_from_VC_2-0_on_070214
//
// Revision 1.3.12.1  2006/05/05 13:05:41  geconomos
// added virtual destructors
//
// Revision 1.3  2004/10/01 12:03:31  frank
// used image in environment element rather than in renderer
//
// Revision 1.2  2004/08/31 15:55:14  michael
// Adjusted code to correclty load old 8 bit .sld/.slc into vxBlockVolume
//
// Revision 1.1.1.1  2004/03/02 03:58:41  geconomos
// Moved and restructured code from the old xp module. This helps 
// recompiling everything in one go and also reduces the compile
// time for the individual projects due to the new library structure.
//
// Revision 1.20  2003/09/22 16:00:05  michael
// renamed shift variable to reflect the precision it is shifting to (8bit)
//
// Revision 1.19  2003/09/04 17:29:45  michael
// merged the branch "XP1_1" back into the trunc
//
// Revision 1.18.2.1  2003/08/11 19:08:16  michael
// fixed issue #3261
//
// Revision 1.18  2003/07/24 17:53:52  michael
// Changed RenderWindow() to pass in thread ID so that the progress of a
// multi-threaded rendering can be monitored
//
// Revision 1.17  2003/06/25 18:33:30  frank
// made inlines inline
//
// Revision 1.16  2003/06/09 12:30:23  michael
// Implemented a true colormap object that returns discretized colortables based
// on either volume header (taking modality and bits stored) or on the maximum
// index needed -> size = max index + 1
//
// Revision 1.15  2003/05/17 15:44:50  michael
// reformatting
//
// Revision 1.14  2003/05/16 13:22:15  frank
// formatting
//
// Revision 1.13  2003/05/14 18:30:04  dongqing
// code review
//
// Revision 1.12  2003/05/14 17:28:24  michael
// code review
//
// Revision 1.11  2002/12/06 21:29:00  michael
// removed old fashioned Set/GetRGBATablePtr(); it was only copy of what is in
// the colormap in the environment.
//
// Revision 1.10  2002/11/12 21:26:35  ingmar
// moved default CreateTexture() implementation from vxRendererSoftwareMPR() to vxRendererSoftware()
//
// Revision 1.9  2002/07/02 20:45:00  geconomos
// Exporting classes .
//
// Revision 1.8  2002/05/13 21:21:51  binli
// removed auxiliary memories (m_ZBufIntensity, m_ZBufPosition) for MIP rendering.
//
// Revision 1.7  2002/05/07 18:36:18  frank
// Removed unneccessary includes.
//
// Revision 1.6  2002/04/19 15:28:26  binli
// MIP rendering/Sliding Thin Slice
//
// Revision 1.5  2002/04/03 13:35:30  michael
// added method to uninitialize the textures
//
// Revision 1.4  2002/04/02 21:51:32  geconomos
// Updated to use vxServerTexMap2d in lieu of ServerTexMap2d.
//
// Revision 1.3  2002/03/29 23:48:25  ingmar
// first step to enableing multithreading in CPU raycaster
//
// Revision 1.2  2002/03/15 21:19:42  michael
// further progress on the 2D renderers
//
// Revision 1.1  2002/03/15 01:27:55  michael
// added initial version of software renderers (still buggy)
//
// $Header: /CVS/cvsRepository/V3D/src/vxViewer/include/vxRendererSoftware.h,v 1.4 2007/02/15 00:08:24 jmeade Exp $
// $Id: vxRendererSoftware.h,v 1.4 2007/02/15 00:08:24 jmeade Exp $
